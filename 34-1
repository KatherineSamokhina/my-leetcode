class Solution {
public:
    int BinarySearch_left(const vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        while(left <= right) {
            int mid = left + (right - left) / 2;
            if(nums[mid] < target)
                left = mid + 1;
            else if (nums[mid] > target)
                right = mid - 1;
            else
                if(mid != 0 && nums[mid - 1] == target)
                    right = mid - 1;
                else
                    return mid;
        }
        return -1;
    }
    int BinarySearch_right(const vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        while(left <= right) {
            int mid = left + (right - left) / 2;
            if(nums[mid] < target)
                left = mid + 1;
            else if (nums[mid] > target)
                right = mid - 1;
            else
                if(mid != nums.size() - 1 && nums[mid + 1] == target)
                    left = mid + 1;
                else
                    return mid;
        }
        return -1;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        return {BinarySearch_left(nums, target), BinarySearch_right(nums, target)}; 
    }
};
